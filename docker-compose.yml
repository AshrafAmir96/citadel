services:
  # Laravel Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: citadel-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
      - /var/www/html/node_modules
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=citadel
      - DB_USERNAME=citadel
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      - SCOUT_DRIVER=meilisearch
      - MEILISEARCH_HOST=http://meilisearch:7700
    networks:
      - citadel-network
    depends_on:
      - mysql
      - redis
      - meilisearch

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: citadel-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: citadel
      MYSQL_USER: citadel
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: root_secret
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - citadel-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: citadel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - citadel-network

  # Meilisearch (for Laravel Scout)
  meilisearch:
    image: getmeili/meilisearch:v1.5
    container_name: citadel-meilisearch
    restart: unless-stopped
    ports:
      - "7700:7700"
    environment:
      - MEILI_ENV=development
      - MEILI_MASTER_KEY=citadel_search_key
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - citadel-network

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: citadel-queue
    restart: unless-stopped
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=citadel
      - DB_USERNAME=citadel
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    networks:
      - citadel-network
    depends_on:
      - mysql
      - redis

  # Scheduler (Laravel Cron)
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: citadel-scheduler
    restart: unless-stopped
    command: sh -c "while true; do php artisan schedule:run --verbose --no-interaction; sleep 60; done"
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=citadel
      - DB_USERNAME=citadel
      - DB_PASSWORD=secret
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
    networks:
      - citadel-network
    depends_on:
      - mysql
      - redis

  # Nginx (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: citadel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - citadel-network
    depends_on:
      - app
    profiles:
      - production

  # MailHog (for email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: citadel-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - citadel-network

  # PhpMyAdmin (for database management)
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: citadel-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: citadel
      PMA_PASSWORD: secret
    networks:
      - citadel-network
    depends_on:
      - mysql
    profiles:
      - tools

  # Redis Commander (for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: citadel-redis-commander
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - citadel-network
    depends_on:
      - redis
    profiles:
      - tools

networks:
  citadel-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  meilisearch_data:
    driver: local
